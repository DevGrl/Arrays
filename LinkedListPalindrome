using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LinkedListPalindrome
{
    class Program
    {
        static void Main(string[] args)
        {
            //Problem
            //Determine whether a linked list is a palindrome (without using the count property)

            //Check
            //Make sure the list is not empty

            LinkedList<string> p = new LinkedList<string>();
            p.AddLast("a");
            p.AddLast("a");
            p.AddLast("b");
            p.AddLast("c");
            p.AddLast("b");
            p.AddLast("a");
            p.AddLast("z");

            bool isPalindrome = StackSolution(p);
            string result = PrintLinkedList(p);

            Console.WriteLine(isPalindrome ? "Yes, " + result + " is a palindrome" : "No, " + result + " is not a palindrome";

            Console.ReadLine();

        }

        private static string PrintLinkedList(LinkedList<string> list)
        {
            LinkedListNode<string> node = list.First;
            string result = "";

            for (int i = 0; i <= list.Count-1; i++ )
            {
                result += node.Value;
                node = node.Next;
            }

            return result;
        }

        //Solution 1: Add all to stack and then pop off stack and compare
        private static bool StackSolution(LinkedList<string> p)
        {
            if(p.Count == 0)
            { 
                return false; 
            }
            
            Stack<LinkedListNode<string>> tempStack = new Stack<LinkedListNode<string>>();
            LinkedListNode<string> node = p.First;
            bool isPalindrome = false;
            //Add to the stack
            while (node != null)
            {                
                tempStack.Push(node);
                node = node.Next;
            } 

            //Pop off stack and compare to linked list
            node = p.First;
            string tempStackValue = "";
            if (tempStack.Count != 0) 
            { 
                tempStackValue = tempStack.Pop().Value; 
            }

            while (tempStack.Count > 0)
            {
                
                if( tempStackValue == node.Value)
                {
                    node = node.Next;
                    tempStackValue = tempStack.Pop().Value;
                }
                else
                {
                    return false;
                }

                isPalindrome = true;
            }
            
            return isPalindrome;
        }        
    }
}
