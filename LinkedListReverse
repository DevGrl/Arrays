using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

//Create a linked list and reverse it
//Example
//1, 2, 3, 4
//4, 3, 2, 1

namespace LinkedListRecursion
{
    class Program
    {
        static void Main(string[] args)
        {
            LinkedList<int> numbers = new LinkedList<int>();
            numbers.AddFirst(1);
            numbers.AddLast(2);
            numbers.AddLast(3);
            numbers.AddLast(4);

            Console.WriteLine("The original linked list");
            foreach (var item in numbers)
            {
                Console.WriteLine(item);
            }

            Stack<LinkedListNode<int>> temp = new Stack<LinkedListNode<int>>();
            int count = numbers.Count;
            numbers = Recurse(numbers,temp, 0, count);

            Console.WriteLine("The recursed linked list");
            foreach (var item in numbers)
            {
                Console.WriteLine(item);
            }

            Console.ReadLine();
        }

        private static LinkedList<int> Recurse(LinkedList<int> numbers, Stack<LinkedListNode<int>> temp, int i, int count)
        {
            //do until i <= original count of numbers
            //for each item in numbers, remove and add to temp
            //then pop items off temp and add them to numbers with addfirst
            //esc: if i == count, return numbers
            if (count == i)
            {
                numbers = PopTempStack(numbers, temp, 0, count);
                return numbers;
            }
            LinkedListNode<int> node = numbers.Last;
            numbers.Remove(node);
            temp.Push(node);
            i++;
            return numbers = Recurse(numbers, temp, i, count);

        }

        private static LinkedList<int> PopTempStack(LinkedList<int> numbers, Stack<LinkedListNode<int>> temp, int i, int count)
        {
            //Pop stack, add to numbers list
            //esc: if i == count, return numbers
            if (count == i)
            {
                return numbers;
            }

            LinkedListNode<int> node = temp.Pop();
            numbers.AddFirst(node);
            i++;
            return numbers = PopTempStack(numbers, temp, i, count);
        }
    }

}
