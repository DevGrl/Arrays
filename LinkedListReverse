using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

//Create a linked list and reverse it
//Example
//1, 2, 3, 4
//4, 3, 2, 1

namespace LinkedListRecursion
{
    class Program
    {
        static void Main(string[] args)
        {
            LinkedList<int> numbers = new LinkedList<int>();
            numbers.AddFirst(1);
            numbers.AddLast(2);
            numbers.AddLast(3);
            numbers.AddLast(4);

            Console.WriteLine("The original linked list");
            foreach (var item in numbers)
            {
                Console.WriteLine(item);
            }

            numbers = Iteration(numbers);

            Console.WriteLine("This is the linked list after being reversed iteratively with a stack");
            foreach (var item in numbers)
            {
                Console.WriteLine(item);
            }
            
            Console.ReadLine();
        }

        private static LinkedList<int> Iteration(LinkedList<int> numbers)
        {
            //Iteration using a stack

            Stack<LinkedListNode<int>> temp = new Stack<LinkedListNode<int>>();
            int count = numbers.Count;
            
            //Put all nodes into the stack, empty the linked list
            for (int i = 0; i <= count-1; i++ )
            {
                LinkedListNode<int> node = numbers.Last;
                numbers.Remove(numbers.Last);
                temp.Push(node);                
            }
            
            //Move all items out of the stack and back into the linked list
            count = temp.Count;
            for (int i = 0; i <= count - 1; i++ )
            {
                LinkedListNode<int> node = temp.Pop();
                numbers.AddFirst(node);
            }
                return numbers;
        }
    }

}
